generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  firstName    String
  lastName     String
  cpf          String       @unique
  phone        String       @unique
  password     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  resetToken   String?
  resetExpires DateTime?
  expenses     Expense[]
  teamMembers  TeamMember[]
  Revenue      Revenue[]

  @@map("users")
}

model Expense {
  id            String            @id @default(cuid())
  title         String
  description   String?
  recurrence    ExpenseRecurrence
  amountInCents Int
  date          DateTime
  status        ExpenseStatus     @default(PENDING)
  until         DateTime?
  batch         String? // uuid
  team          Team              @relation(fields: [teamId], references: [id])
  teamId        String
  user          User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  category      ExpenseCategory?  @relation(fields: [categoryId], references: [id])
  categoryId    String?

  @@map("expenses")
}

model Team {
  id                String            @id @default(cuid())
  name              String
  expenses          Expense[]
  teamMembers       TeamMember[]
  expenseCategories ExpenseCategory[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  TeamInvite        TeamInvite[]
  RevenueCategory   RevenueCategory[]
  Revenue           Revenue[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("team_members")
}

model TeamInvite {
  id        String   @id @default(cuid())
  email     String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, teamId])
  @@map("team_invites")
}

model ExpenseCategory {
  id        String    @id @default(cuid())
  name      String
  expenses  Expense[]
  Team      Team      @relation(fields: [teamId], references: [id])
  teamId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("expense_categories")
}

model RevenueCategory {
  id        String    @id @default(cuid())
  name      String
  revenues  Revenue[]
  Team      Team      @relation(fields: [teamId], references: [id])
  teamId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("revenue_categories")
}

model Revenue {
  id            String           @id @default(cuid())
  title         String
  description   String?
  recurrence    String
  amountInCents Int
  date          DateTime
  status        RevenueStatus    @default(PENDING)
  until         DateTime?
  batch         String? // uuid
  team          Team             @relation(fields: [teamId], references: [id])
  teamId        String
  user          User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  category      RevenueCategory? @relation(fields: [categoryId], references: [id])
  categoryId    String?

  @@map("revenues")
}

enum RevenueStatus {
  PENDING
  RECEIVED
  OVERDUE
}

enum RevenueRecurrence {
  MONTHLY
  WEEKLY
  DAILY
  ONCE
}

enum ExpenseStatus {
  PENDING
  PAID
  OVERDUE
}

enum ExpenseRecurrence {
  MONTHLY
  WEEKLY
  DAILY
  ONCE
}
